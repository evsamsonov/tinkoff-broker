// Code generated by mockery v2.43.2. DO NOT EDIT.

package tnkbroker

import (
	investgo "github.com/russianinvestments/invest-api-go-sdk/investgo"
	mock "github.com/stretchr/testify/mock"
)

// mockMarketDataServiceClient is an autogenerated mock type for the marketDataServiceClient type
type mockMarketDataServiceClient struct {
	mock.Mock
}

// GetLastPrices provides a mock function with given fields: instrumentIds
func (_m *mockMarketDataServiceClient) GetLastPrices(instrumentIds []string) (*investgo.GetLastPricesResponse, error) {
	ret := _m.Called(instrumentIds)

	if len(ret) == 0 {
		panic("no return value specified for GetLastPrices")
	}

	var r0 *investgo.GetLastPricesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*investgo.GetLastPricesResponse, error)); ok {
		return rf(instrumentIds)
	}
	if rf, ok := ret.Get(0).(func([]string) *investgo.GetLastPricesResponse); ok {
		r0 = rf(instrumentIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investgo.GetLastPricesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(instrumentIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockMarketDataServiceClient creates a new instance of mockMarketDataServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMarketDataServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMarketDataServiceClient {
	mock := &mockMarketDataServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
