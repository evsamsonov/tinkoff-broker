// Code generated by mockery v2.43.2. DO NOT EDIT.

package tnkbroker

import (
	investgo "github.com/russianinvestments/invest-api-go-sdk/investgo"
	investapi "github.com/russianinvestments/invest-api-go-sdk/proto"

	mock "github.com/stretchr/testify/mock"
)

// mockOrdersServiceClient is an autogenerated mock type for the ordersServiceClient type
type mockOrdersServiceClient struct {
	mock.Mock
}

// GetOrderState provides a mock function with given fields: accountId, orderId, priceType
func (_m *mockOrdersServiceClient) GetOrderState(accountId string, orderId string, priceType investapi.PriceType) (*investgo.GetOrderStateResponse, error) {
	ret := _m.Called(accountId, orderId, priceType)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderState")
	}

	var r0 *investgo.GetOrderStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, investapi.PriceType) (*investgo.GetOrderStateResponse, error)); ok {
		return rf(accountId, orderId, priceType)
	}
	if rf, ok := ret.Get(0).(func(string, string, investapi.PriceType) *investgo.GetOrderStateResponse); ok {
		r0 = rf(accountId, orderId, priceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investgo.GetOrderStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, investapi.PriceType) error); ok {
		r1 = rf(accountId, orderId, priceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOrder provides a mock function with given fields: req
func (_m *mockOrdersServiceClient) PostOrder(req *investgo.PostOrderRequest) (*investgo.PostOrderResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for PostOrder")
	}

	var r0 *investgo.PostOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*investgo.PostOrderRequest) (*investgo.PostOrderResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*investgo.PostOrderRequest) *investgo.PostOrderResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investgo.PostOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*investgo.PostOrderRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockOrdersServiceClient creates a new instance of mockOrdersServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOrdersServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOrdersServiceClient {
	mock := &mockOrdersServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
